>>>markdown
### SCOPE

In this project i would like to answer all the questions from Curbal's '25 Days of DAX Fridays! Challenge â€“ Ed1: NorthWind Company' (https://curbal.com/25-days-of-dax-fridays-challenge-ed1-northwind-company) using Malloy. Now in this challenge all the required answers are in form of single numeric value or string - i won't be returning tables here and i won't be able to show some of Malloy's key concepts (like reusing queries, nesting and many more). So this notebook is begginer's level.
>>>markdown


https://github.com/graphql-compose/graphql-compose-examples/tree/master/examples/northwind/data/csv .
When using csv or parquet files DuckDb is used as underlying engine (currently Malloy can be used also with BigQuery or Postgres). Csv files were transformed to parquet files (this can be visible in **DataTransformation.malloysql** notebook).

Dataset consists of 11 tables (2 tables are missing from original schema: customer_customer_demo and customer_demographics).

This is how original schema looks like: (from https://github.com/yugabyte/yugabyte-db/wiki/Northwind-Sample-Database)

![Alt text](schema.png)
>>>malloy
import '25Days.malloy'
>>>markdown
Model is more or less ready. In some of the sources we can spot dimensions and measures - most of these were added later, while answering questions.
>>>markdown
### QUESTIONS


Question 1: How many current products cost less then 20$?
>>>malloy
run: ProductsBase -> {
    aggregate: under_20_products is count()
    where: unitPrice < 20 and is_current
}
>>>markdown

Question 2: Which product is the most expensive?
>>>malloy
run: ProductsBase -> {
    project: productName, unitPrice, is_current
    order_by: unitPrice desc
    limit: 1
}
>>>markdown

Question 3: What is the average unit price for our products?
>>>malloy
// Version 1...
run: ProductsBase -> {
    aggregate: 
        total_unit_price is unitPrice.sum()
        total_product_count is count()
} -> {
    project:
        avg_unit_price is round(total_unit_price / total_product_count, 2)
}

run: ProductsBase -> {
    # format currency
    aggregate: avg_unit_price is unitPrice.avg()
}
>>>markdown
Question 4: How many products are above the average unit price? 
>>>malloy
// Feels somewhate weird to use the group_by just to project the fields into the next query, but
// an error message I ran into along the way gave me the idea to do it like this.
run: ProductsBase -> {
    group_by: productID, unitPrice
    aggregate: avg_unit_price is round(all(unitPrice.avg()),2)
} -> {
    aggregate: above_avg_unit_price_count is count()
    where: unitPrice > avg_unit_price
}
>>>markdown

Question 5: How many products cost between $15 and $25? (inclusive)
>>>malloy
run: ProductsBase -> {
    aggregate: total_between_15_and_25 is count()
    where: unitPrice <= 25 and unitPrice >= 15
}
>>>markdown

Question 6: What is the average number of products (not qty) per order? - this question was later clarified: we need to calculate average order size:
>>>markdown

Also calculated using pipeline:
>>>malloy
// Version 1
run: OrderDetailsBase -> {
    group_by: orderID
    aggregate: products_in_order is count()
} -> {
    aggregate: avg_products_in_order is products_in_order.avg()
}

// Version 2
// Wasn't sure if productID would garunteed to be distinct
run: OrderDetailsBase -> {
    group_by: orderID, productID
} -> {
    group_by: orderID
    aggregate: products_in_order is count()
} -> {
    aggregate: avg_products_in_order is products_in_order.avg()
}
>>>markdown

Question 7: What is the order value in $ of open orders? (not shipped)
`order_is_open` is something we might want to ask often so it was added to the OrdersBase source.
>>>malloy
// Version 1, not sure why wrong
// run: OrdersBase -> {
//     join_many: details is OrderDetailsBase on orderID = details.orderID
//     aggregate: open_orders_value is sum(details.unitPrice * details.quantity)
//     where: order_is_open
// }

// What I'd think as sql
source: sql1 is duckdb.sql("""
    SELECT 
        SUM(details.unitPrice * details.quantity) AS open_orders_value
      FROM '../northwind_test/parquet/orders.parquet' AS orders
 LEFT JOIN '../northwind_test/parquet/order_details.parquet' as details ON details.orderID=orders.orderID
     WHERE orders.shippedDate IS NULL
""")

// Version 2, reverse the join thinking
run: OrderDetailsBase -> {
    aggregate: open_orders_value is sum(unitPrice * quantity)
    join_one: order is OrdersBase on order.orderID = orderID
    where: order.order_is_open
}

// What I'd think as sql
source: test2 is duckdb.sql("""
    SELECT 
        SUM(details.unitPrice * details.quantity) AS open_orders_value
      FROM '../northwind_test/parquet/order_details.parquet' as details
INNER JOIN '../northwind_test/parquet/orders.parquet' AS orders ON details.orderID=orders.orderID
     WHERE orders.shippedDate IS NULL
""")

// Version 3, just noticed the revenue column 
run: OrdersBase -> {
    join_many: details is OrderDetailsBase on orderID = details.orderID
    # format currency
    aggregate: open_orders_value is details.revenue.sum()
    where: order_is_open
}
>>>markdown
Question 8: How many orders are single item (only one product ordered)?
>>>malloy
run: OrderDetailsBase -> {
    group_by: orderID
    aggregate: order_item_count is count()
} -> {
    aggregate: count_single_item_orders is count()
    where: order_item_count = 1
}
>>>markdown
Question 9: Avg sales per transaction for "Romero y Tobillo"
>>>malloy
// Maybe should say that 'Romery y Tobillo' is a customer, it's not obvious this is the case
// from the prompt

// I think the name should 'Romero y tomillo' (lower-case on the T)
run: OrderDetailsBase -> {
      group_by: orderID, customer_detail.companyName
     aggregate: order_sales is sum(unitPrice * quantity)
      join_one: order_header is OrdersBase on order_header.orderID = orderID
      join_one: customer_detail is CustomersBase on customer_detail.customerID = order_header.customerID
         where: customer_detail.companyName = "Romero y tomillo"
} -> {
     # format currency
     aggregate: avg_sales_per_order is round(order_sales.avg(),2)
} // I'm still thinking in rectangles I think...

// Side note, malloy extension updated and a previous cell was then broken
// It seems odd that it would then cause this cell to throw an error for the other cell
// I suppose there is kind of an issue logged for this already
// https://github.com/malloydata/malloy-vscode-extension/issues/106
>>>markdown
Question 10: How many days since 'North/South' last purchase?
>>>malloy
// Are we missing data? says last order date should be 10/4/2022
// Version 1
run: OrdersBase -> {
    join_one: customer_detail is Customers on customer_detail.customerID = customerID
   aggregate: days_since_order is min(days(orderDate to now))
       where: customer_detail.companyName = 'North/South'
}

// Version 2, just hard coded the date they said to use... still doesn't match
run: OrdersBase -> {
   join_one: customer_detail is Customers on customer_detail.customerID = customerID
  aggregate: days_since_order is min(days(@2022-10-04 to now))
      where: customer_detail.companyName = 'North/South'
}

// Version 3, just use original then... skip join just use customerID
run: OrdersBase -> {
    aggregate: days_since_order is min(days(orderDate to now))
        where: customerID = 'NORTS'
}
>>>markdown
Question 11: How many customers have ordered only once?
>>>malloy
run: OrdersBase -> {
     group_by: customerID
    aggregate: order_count is count()
} -> {
    aggregate: customers_with_only_1_order is count()
        where: order_count = 1
}
>>>markdown
Question 12: How many new customers in 1998? - (slightly modified, 1998 instead of 2022 as my version of data has different time range)
>>>malloy
run: OrdersBase -> {
     group_by: customerID
    aggregate: first_order_date is min(orderDate)
} -> {
    aggregate: new_customers_in_1998 is count()
        where: first_order_date.year = @1998
}
>>>markdown
Question 13: How many lost customers in 1998 (no purchases)? - so how many customers bought something in 1997 but nothing in 1998
(slightly modified, 1998 instead of 2022 as my version of data has different time range, picked 1998)
>>>malloy
query: orders_in_1997 is OrdersBase -> {
     group_by: customerID
        where: orderDate.year = @1997
}

query: orders_in_1998 is OrdersBase -> {
    group_by: customerID
       where: orderDate.year = @1998
}

// This is how I would think of doing it in SQL
// run: orders_in_1997 -> {
//   aggregate: lost_in_1998 is count()
//       where: customerID not in orders_in_1998
// }

// Learned how to filter my aggregates in line...
run: OrdersBase -> {
     group_by: customerID
    aggregate: 
        orders_in_1997 is count() { where: orderDate.year = @1997}
        orders_in_1998 is count() { where: orderDate.year = @1998}
} -> {
    aggregate: lost_in_1998 is count()
        where: orders_in_1997 > 0 and orders_in_1998 = 0
}
>>>markdown
Question 14: How many customers has never purchased Queso Cabrales?
>>>malloy
// Doesn't agree with Lloyd's answer, but agrees with site
query: my_solution is CustomersBase -> {
    group_by: customerID
   join_many: orders is OrdersBase on orders.customerID = customerID
   join_many: order_details is OrderDetailsBase on orders.orderID = order_details.orderID
    join_one: product_details is ProductsBase on product_details.productID = order_details.productID
   aggregate: purchases_of_queso_cabrales is count() { where: product_details.productName = 'Queso Cabrales'}
 } -> {
   aggregate: customers_with_zero_queso_purchases is count()
       where: purchases_of_queso_cabrales = 0
 }

// Double checking work...
// Distinct Customers who bought queso
run: OrderDetailsBase -> {
  group_by: order_header.customerID
 aggregate: queso_orders is count()
  join_one: product_details is ProductsBase on product_details.productID = productID
  join_one: order_header is OrdersBase on order_header.orderID = orderID
     where: product_details.productName = 'Queso Cabrales' 
} -> {
  aggregate: total is count()
}
// 32 Customers have bought quesy

// Total Customers
run: CustomersBase -> {
  aggregate: total is count()
}
// 91 total customers
// 91-32 = 59

// Model results in wrong answer with "similar" pattern
run: Customers -> {
   group_by: customerID
  aggregate: purchases_of_queso_cabrales is count() { where: Orders.OrderDetails.Products.productName = 'Queso Cabrales'}
} -> {
   aggregate: customers_with_zero_queso_purchases is count()
       where: purchases_of_queso_cabrales = 0
}

// Just tacking my solution to the bottom so running the cell returns my answer
run: my_solution
>>>markdown
Question 15: How many customers have purchased only Queso Cabrales?
>>>malloy
query: question_15 is CustomersBase -> {
    group_by: customerID, orders.orderID
   join_many: orders is OrdersBase on orders.customerID = customerID
   join_many: order_details is OrderDetailsBase on orders.orderID = order_details.orderID
    join_one: product_details is ProductsBase on product_details.productID = order_details.productID
   aggregate: order_quantity_of_queso is count() { where: product_details.productName = 'Queso Cabrales'}
   aggregate: order_quantity_of_other_products is count() { where: product_details.productName != 'Queso Cabrales'}
 } -> {
   aggregate: customers_with_queso_only_orders is count()
       where: order_quantity_of_queso > 0 and order_quantity_of_other_products = 0
 }

// Again doesn't work with the way the predefined model is setup, unsure why at the moment
run: Customers -> {
    group_by: customerID, Orders.orderID
   aggregate: order_quantity_of_queso is count() { where: Orders.OrderDetails.Products.productName = 'Queso Cabrales'}
   aggregate: order_quantity_of_other_products is count() { where: Orders.OrderDetails.Products.productName != 'Queso Cabrales'}
} -> {
   aggregate: customers_with_queso_only_orders is count()
       where: order_quantity_of_queso > 0 and order_quantity_of_other_products = 0
}

run: question_15
>>>markdown
Question 16: How many products are out of stock?
>>>malloy
run: ProductsBase -> {
   aggregate: count_out_of_stock is count()
       where: unitsInStock <= 0
}
>>>markdown
Question 17: How many products need to be restocked (based on restock levels)?
>>>malloy
// Not a huge fan of the phrasing of this question so I included what I would originally think...

run: ProductsBase -> {
  aggregate: 
    total_needing_reorder is count() { where: unitsOnOrder + unitsInStock < reorderLevel }
    total_needing_restock_ignoring_already_on_orders is count() { where: unitsInStock < reorderLevel }
}
>>>markdown
Question 18: How many products on order we need to restock?
>>>malloy
// This question makes no sense... what are we asking for?
// Oh well this is my best guess at something that might make sense
run: ProductsBase -> {
    aggregate: total_on_order_below_restock is count() 
        where: unitsOnOrder > 0 and unitsInStock < reorderLevel
}
>>>markdown
Question 19: What is the stocked value of the discontinued products?
>>>malloy
run: ProductsBase -> {
    # format currency
    aggregate: value_of_discontinued_products_in_stock is sum(unitPrice * unitsInStock)
        where: is_discontinued
}
>>>markdown
Question 20: Which vendor has the highest stock value?
>>>malloy
// There is nothing called a vendor anywhere in the schema...
// Assuming maybe which product has the highest current value based on current stocked quantity?
run: ProductsBase -> {
     group_by: productID, productName
     # format currency
    aggregate: stock_value is sum(unitPrice * unitsInStock)
     order_by: stock_value desc
        limit: 1
}

// Nope, checked the answer, it's supposed to be 'Aux joyeux ecclÃ©siastiques'
// So given that searched around and it looks like the question shoul be: Which supplier has the highest stock value.
run: ProductsBase -> {
    group_by: supplierID, supplier.companyName
    join_one: supplier is SuppliersBase on supplier.supplierID = supplierID
    # format currency
   aggregate: stock_value is sum(unitPrice * unitsInStock)
    order_by: stock_value desc
       limit: 1
}
>>>markdown
Question 21: How many employees (%) are female? (we don't seem to have a gender, see if you can solve with baby names.)
>>>malloy
// Assuming gender by pronoun "preferences" in notes, had to not exclude it in the transformation and upload an updated parquet
run: EmployeesBase -> {
    project: has_female_pronouns is notes ~ r'[Ss]he'
} -> {
    aggregate: 
        female_count is count() { where: has_female_pronouns }
        total_count is count()
} -> {
    # format percent
    project: percent_female is female_count / total_count
}

run: Em
>>>markdown
Question 22: How many employees are 60 years old or over?
>>>malloy
run: EmployeesBase -> {
    aggregate: over_60_count is count()
        where: birthDate < (now - 60 years)
}
>>>markdown
Question 23: Which employee had the highest sales in 1997? - (slightly modified, originally it was 2022 but my version of data has different time range)
>>>malloy
run: OrderDetailsBase -> {
    join_one: order_header is OrdersBase on order_header.orderID = orderID
    join_one: employees is EmployeesBase on employees.employeeID = order_header.employeeID
    group_by: order_header.employeeID, Employee is concat(employees.firstName, ' ', employees.lastName)
    # format currency
   aggregate: order_value_1997 is sum(unitPrice * quantity) { where: order_header.orderDate.year = @1997}
    order_by: order_value_1997 desc
       limit: 1
}
>>>markdown
Question 24: How many employees sold over 100K$ in 1997? (slightly modified, originally it was 2022 but my version of data has different time range)
>>>malloy
run: OrderDetailsBase -> {
    join_one: order_header is OrdersBase on order_header.orderID = orderID
    join_one: employees is EmployeesBase on employees.employeeID = order_header.employeeID
    group_by: order_header.employeeID, Employee is concat(employees.firstName, ' ', employees.lastName)
    # format currency
   aggregate: order_value_1997 is sum(unitPrice * quantity) { where: order_header.orderDate.year = @1997}
} -> {
    aggregate: employees_over_100k is count()
        where: order_value_1997 > 100000
}
>>>markdown
Question 25: How many employees got hired in 1994?
>>>malloy
run: EmployeesBase -> {
    aggregate: hired_in_1994 is count()
        where: hireDate.year = @1994
}